'use strict';
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const vscode_1 = require("vscode");
__export(require("./commands/common"));
__export(require("./commands/clearFileAnnotations"));
__export(require("./commands/closeUnchangedFiles"));
__export(require("./commands/copyMessageToClipboard"));
__export(require("./commands/copyShaToClipboard"));
__export(require("./commands/diffDirectory"));
__export(require("./commands/diffLineWithPrevious"));
__export(require("./commands/diffLineWithWorking"));
__export(require("./commands/diffWith"));
__export(require("./commands/diffWithBranch"));
__export(require("./commands/diffWithNext"));
__export(require("./commands/diffWithPrevious"));
__export(require("./commands/diffWithRevision"));
__export(require("./commands/diffWithWorking"));
__export(require("./commands/externalDiff"));
__export(require("./commands/openChangedFiles"));
__export(require("./commands/openBranchesInRemote"));
__export(require("./commands/openBranchInRemote"));
__export(require("./commands/openCommitInRemote"));
__export(require("./commands/openFileInRemote"));
__export(require("./commands/openFileRevision"));
__export(require("./commands/openInRemote"));
__export(require("./commands/openRepoInRemote"));
__export(require("./commands/resetSuppressedWarnings"));
__export(require("./commands/showCommitSearch"));
__export(require("./commands/showFileBlame"));
__export(require("./commands/showLastQuickPick"));
__export(require("./commands/showLineBlame"));
__export(require("./commands/showQuickBranchHistory"));
__export(require("./commands/showQuickCommitDetails"));
__export(require("./commands/showQuickCommitFileDetails"));
__export(require("./commands/showQuickCurrentBranchHistory"));
__export(require("./commands/showQuickFileHistory"));
__export(require("./commands/showQuickRepoStatus"));
__export(require("./commands/showQuickStashList"));
__export(require("./commands/stashApply"));
__export(require("./commands/stashDelete"));
__export(require("./commands/stashSave"));
__export(require("./commands/toggleCodeLens"));
__export(require("./commands/toggleFileBlame"));
__export(require("./commands/toggleFileRecentChanges"));
__export(require("./commands/toggleLineBlame"));
const Commands = require("./commands");
function configureCommands(context, git, annotationController, currentLineController, codeLensController) {
    context.subscriptions.push(vscode_1.commands.registerTextEditorCommand('gitlens.computingFileAnnotations', () => { }));
    context.subscriptions.push(new Commands.CloseUnchangedFilesCommand(git));
    context.subscriptions.push(new Commands.OpenChangedFilesCommand(git));
    context.subscriptions.push(new Commands.ExternalDiffCommand(git));
    context.subscriptions.push(new Commands.CopyMessageToClipboardCommand(git));
    context.subscriptions.push(new Commands.CopyShaToClipboardCommand(git));
    context.subscriptions.push(new Commands.DiffDirectoryCommand(git));
    context.subscriptions.push(new Commands.DiffLineWithPreviousCommand(git));
    context.subscriptions.push(new Commands.DiffLineWithWorkingCommand(git));
    context.subscriptions.push(new Commands.DiffWithCommand(git));
    context.subscriptions.push(new Commands.DiffWithBranchCommand(git));
    context.subscriptions.push(new Commands.DiffWithNextCommand(git));
    context.subscriptions.push(new Commands.DiffWithPreviousCommand(git));
    context.subscriptions.push(new Commands.DiffWithRevisionCommand(git));
    context.subscriptions.push(new Commands.DiffWithWorkingCommand(git));
    context.subscriptions.push(new Commands.OpenBranchesInRemoteCommand(git));
    context.subscriptions.push(new Commands.OpenBranchInRemoteCommand(git));
    context.subscriptions.push(new Commands.OpenCommitInRemoteCommand(git));
    context.subscriptions.push(new Commands.OpenFileInRemoteCommand(git));
    context.subscriptions.push(new Commands.OpenFileRevisionCommand(annotationController));
    context.subscriptions.push(new Commands.OpenInRemoteCommand());
    context.subscriptions.push(new Commands.OpenRepoInRemoteCommand(git));
    context.subscriptions.push(new Commands.ClearFileAnnotationsCommand(annotationController));
    context.subscriptions.push(new Commands.ShowFileBlameCommand(annotationController));
    context.subscriptions.push(new Commands.ShowLineBlameCommand(currentLineController));
    context.subscriptions.push(new Commands.ToggleFileBlameCommand(annotationController));
    context.subscriptions.push(new Commands.ToggleFileRecentChangesCommand(annotationController));
    context.subscriptions.push(new Commands.ToggleLineBlameCommand(currentLineController));
    context.subscriptions.push(new Commands.ResetSuppressedWarningsCommand());
    context.subscriptions.push(new Commands.ShowLastQuickPickCommand());
    context.subscriptions.push(new Commands.ShowQuickBranchHistoryCommand(git));
    context.subscriptions.push(new Commands.ShowQuickCurrentBranchHistoryCommand(git));
    context.subscriptions.push(new Commands.ShowQuickCommitDetailsCommand(git));
    context.subscriptions.push(new Commands.ShowQuickCommitFileDetailsCommand(git));
    context.subscriptions.push(new Commands.ShowCommitSearchCommand(git));
    context.subscriptions.push(new Commands.ShowQuickFileHistoryCommand(git));
    context.subscriptions.push(new Commands.ShowQuickRepoStatusCommand(git));
    context.subscriptions.push(new Commands.ShowQuickStashListCommand(git));
    context.subscriptions.push(new Commands.StashApplyCommand(git));
    context.subscriptions.push(new Commands.StashDeleteCommand(git));
    context.subscriptions.push(new Commands.StashSaveCommand(git));
    context.subscriptions.push(new Commands.ToggleCodeLensCommand(codeLensController));
}
exports.configureCommands = configureCommands;
//# sourceMappingURL=commands.js.map