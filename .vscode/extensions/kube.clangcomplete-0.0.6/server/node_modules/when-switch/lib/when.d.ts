export declare type When<T, V> = {
    is: <I>(expr: T, value: ((expr?: T) => I) | I) => When<T, V | I>;
    match: <I>(expr: RegExp, value: ((expr?: T) => I) | I) => When<T, V | I>;
    else: <E>(value: ((expr?: T) => E) | E) => V | E;
};
declare const when: <T>(expr: T) => {
    is: <V>(constExpr: T, value: V | ((expr?: T) => V)) => {
        is: <I>(expr: T, value: I | ((expr?: T) => I)) => any;
        match: <I>(expr: RegExp, value: I | ((expr?: T) => I)) => any;
        else: <E>(value: E | ((expr?: T) => E)) => V | E;
    };
    match: <V>(regExp: RegExp, value: V | ((expr?: T) => V)) => {
        is: <I>(expr: T, value: I | ((expr?: T) => I)) => any;
        match: <I>(expr: RegExp, value: I | ((expr?: T) => I)) => any;
        else: <E>(value: E | ((expr?: T) => E)) => V | E;
    };
    else: <V>(defaultValue: V | ((_: T) => V)) => V;
};
export default when;
